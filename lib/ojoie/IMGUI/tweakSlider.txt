// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a slider, they are all required.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2.0f));

    frame_bb.Max.x = window->Pos.x + window->Size.x - 12.f;
    if (window->ScrollbarY) {
        frame_bb.Max.x -= window->ScrollbarSizes.x;
    }

    float labelWidth = (frame_bb.Max.x - frame_bb.Min.x) * 0.2f;
    ImRect labelFrame = frame_bb;
    labelFrame.Max.x = labelFrame.Min.x + labelWidth;
    frame_bb.Min.x += labelWidth;

    float valueWidth = 50.f;
    frame_bb.Max.x -= valueWidth;

    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    const bool temp_input_allowed = (flags & ImGuiSliderFlags_NoInput) == 0;
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb, temp_input_allowed ? ImGuiItemFlags_Inputable : 0))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;

    const bool hovered = ItemHoverable(frame_bb, id);
    bool temp_input_is_active = temp_input_allowed && TempInputIsActive(id);
    if (!temp_input_is_active)
    {
        // Tabbing or CTRL-clicking on Slider turns it into an input box
        const bool input_requested_by_tabbing = temp_input_allowed && (g.LastItemData.StatusFlags & ImGuiItemStatusFlags_FocusedByTabbing) != 0;
        const bool clicked = hovered && IsMouseClicked(0, id);
        const bool make_active = (input_requested_by_tabbing || clicked || g.NavActivateId == id);
        if (make_active && clicked)
            SetKeyOwner(ImGuiKey_MouseLeft, id);
        if (make_active && temp_input_allowed)
            if (input_requested_by_tabbing || (clicked && g.IO.KeyCtrl) || (g.NavActivateId == id && (g.NavActivateFlags & ImGuiActivateFlags_PreferInput)))
                temp_input_is_active = true;

        if (make_active && !temp_input_is_active)
        {
            SetActiveID(id, window);
            SetFocusID(id, window);
            FocusWindow(window);
            g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
        }
    }

    if (temp_input_is_active)
    {
        ImRect frame_b(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2.0f));
        // Only clamp CTRL+Click input when ImGuiSliderFlags_AlwaysClamp is set
        const bool is_clamp_input = (flags & ImGuiSliderFlags_AlwaysClamp) != 0;
        return TempInputScalar(frame_b, id, label, data_type, p_data, format, is_clamp_input ? p_min : NULL, is_clamp_input ? p_max : NULL);
    }

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    //RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);


    if (label_size.x > 0.0f) {
        RenderTextClipped(ImVec2(labelFrame.Min.x, labelFrame.Min.y),
                          ImVec2(labelFrame.Max.x, labelFrame.Max.y), label, nullptr, nullptr);
    }

    // Slider behavior
    ImRect grab_bb;
    const bool value_changed = SliderBehavior(frame_bb, id, data_type, p_data, p_min, p_max, format, ImGuiSliderFlags_None, &grab_bb);
    if (value_changed)
        MarkItemEdited(id);

//    ImColor bodyColor = ImColor(int(24), int(24), int(24), 255);
    // Render grab
    window->DrawList->AddLine(ImVec2(frame_bb.Min.x,frame_bb.GetCenter().y), ImVec2(frame_bb.Max.x, frame_bb.GetCenter().y), GetColorU32({ 0.37f, 0.37f, 0.37f, 1.f }), 3.f);
    //window->DrawList->AddLine(ImVec2(frame_bb.Min.x,grab_bb.GetCenter().y), ImVec2(grab_bb.Max.x, grab_bb.GetCenter().y), frame_col);

    if (grab_bb.Max.x > grab_bb.Min.x) {
        if (g.ActiveId == id) {
            window->DrawList->AddCircleFilled(ImVec2((grab_bb.Min.x + grab_bb.Max.x) / 2, grab_bb.GetCenter().y), 12, GetColorU32(ImGuiCol_SliderGrabActive));
        }

        window->DrawList->AddCircleFilled(ImVec2((grab_bb.Min.x + grab_bb.Max.x) / 2, grab_bb.GetCenter().y), 6, (g.HoveredId == id || g.ActiveId == id) ? GetColorU32({ 0.92f, 0.92f, 0.92f, 1.f }) : GetColorU32({ 0.6f, 0.6f, 0.6f, 1.f }));
    }
    //window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.

    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    RenderTextClipped(ImVec2(frame_bb.Max.x + 4.f, frame_bb.Min.y),
                      ImVec2(frame_bb.Max.x + valueWidth, frame_bb.Max.y),
                      value_buf, value_buf_end,NULL);

    ImGui::NewLine();

    //IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.ItemFlags);
    return value_changed;
}